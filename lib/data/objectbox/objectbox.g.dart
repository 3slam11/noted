// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'objectbox.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 1304949193722696686),
    name: 'AppPreferenceEntity',
    lastPropertyId: const obx_int.IdUid(7, 7981894296093264979),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3350612006007532093),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 3580252284323550820),
        name: 'key',
        type: 9,
        flags: 2080,
        indexId: const obx_int.IdUid(1, 5544669873004864009),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 8586456915130325060),
        name: 'stringValue',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 7912334587981645656),
        name: 'intValue',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 6639909338177787847),
        name: 'doubleValue',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 8389784874937322054),
        name: 'boolValue',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 7981894296093264979),
        name: 'type',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 7621539956910530480),
    name: 'CacheEntity',
    lastPropertyId: const obx_int.IdUid(4, 8069853229161244588),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8817126469460745900),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7130236165845970808),
        name: 'key',
        type: 9,
        flags: 2080,
        indexId: const obx_int.IdUid(2, 3105632472526488003),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 8917932041461399594),
        name: 'jsonData',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 8069853229161244588),
        name: 'cacheTime',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 6860424063945157781),
    name: 'ItemEntity',
    lastPropertyId: const obx_int.IdUid(7, 2046266376013469270),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 1894407441933325984),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5462260842335556165),
        name: 'itemId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 6785731823907319606),
        name: 'title',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 4344259844474141660),
        name: 'categoryName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 6531077791108017921),
        name: 'posterUrl',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 777118723970197934),
        name: 'releaseDate',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 2046266376013469270),
        name: 'listType',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(3, 6860424063945157781),
    lastIndexId: const obx_int.IdUid(2, 3105632472526488003),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    AppPreferenceEntity: obx_int.EntityDefinition<AppPreferenceEntity>(
      model: _entities[0],
      toOneRelations: (AppPreferenceEntity object) => [],
      toManyRelations: (AppPreferenceEntity object) => {},
      getId: (AppPreferenceEntity object) => object.id,
      setId: (AppPreferenceEntity object, int id) {
        object.id = id;
      },
      objectToFB: (AppPreferenceEntity object, fb.Builder fbb) {
        final keyOffset = fbb.writeString(object.key);
        final stringValueOffset = object.stringValue == null
            ? null
            : fbb.writeString(object.stringValue!);
        final typeOffset = object.type == null
            ? null
            : fbb.writeString(object.type!);
        fbb.startTable(8);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, keyOffset);
        fbb.addOffset(2, stringValueOffset);
        fbb.addInt64(3, object.intValue);
        fbb.addFloat64(4, object.doubleValue);
        fbb.addBool(5, object.boolValue);
        fbb.addOffset(6, typeOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final keyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final stringValueParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final intValueParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          10,
        );
        final doubleValueParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          12,
        );
        final boolValueParam = const fb.BoolReader().vTableGetNullable(
          buffer,
          rootOffset,
          14,
        );
        final typeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 16);
        final object = AppPreferenceEntity(
          id: idParam,
          key: keyParam,
          stringValue: stringValueParam,
          intValue: intValueParam,
          doubleValue: doubleValueParam,
          boolValue: boolValueParam,
          type: typeParam,
        );

        return object;
      },
    ),
    CacheEntity: obx_int.EntityDefinition<CacheEntity>(
      model: _entities[1],
      toOneRelations: (CacheEntity object) => [],
      toManyRelations: (CacheEntity object) => {},
      getId: (CacheEntity object) => object.id,
      setId: (CacheEntity object, int id) {
        object.id = id;
      },
      objectToFB: (CacheEntity object, fb.Builder fbb) {
        final keyOffset = fbb.writeString(object.key);
        final jsonDataOffset = fbb.writeString(object.jsonData);
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, keyOffset);
        fbb.addOffset(2, jsonDataOffset);
        fbb.addInt64(3, object.cacheTime);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final keyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final jsonDataParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final cacheTimeParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        final object = CacheEntity(
          id: idParam,
          key: keyParam,
          jsonData: jsonDataParam,
          cacheTime: cacheTimeParam,
        );

        return object;
      },
    ),
    ItemEntity: obx_int.EntityDefinition<ItemEntity>(
      model: _entities[2],
      toOneRelations: (ItemEntity object) => [],
      toManyRelations: (ItemEntity object) => {},
      getId: (ItemEntity object) => object.id,
      setId: (ItemEntity object, int id) {
        object.id = id;
      },
      objectToFB: (ItemEntity object, fb.Builder fbb) {
        final itemIdOffset = fbb.writeString(object.itemId);
        final titleOffset = object.title == null
            ? null
            : fbb.writeString(object.title!);
        final categoryNameOffset = object.categoryName == null
            ? null
            : fbb.writeString(object.categoryName!);
        final posterUrlOffset = object.posterUrl == null
            ? null
            : fbb.writeString(object.posterUrl!);
        final releaseDateOffset = object.releaseDate == null
            ? null
            : fbb.writeString(object.releaseDate!);
        final listTypeOffset = fbb.writeString(object.listType);
        fbb.startTable(8);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, itemIdOffset);
        fbb.addOffset(2, titleOffset);
        fbb.addOffset(3, categoryNameOffset);
        fbb.addOffset(4, posterUrlOffset);
        fbb.addOffset(5, releaseDateOffset);
        fbb.addOffset(6, listTypeOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final itemIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final titleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final categoryNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final posterUrlParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final releaseDateParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 14);
        final listTypeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 16, '');
        final object = ItemEntity(
          id: idParam,
          itemId: itemIdParam,
          title: titleParam,
          categoryName: categoryNameParam,
          posterUrl: posterUrlParam,
          releaseDate: releaseDateParam,
          listType: listTypeParam,
        );

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [AppPreferenceEntity] entity fields to define ObjectBox queries.
class AppPreferenceEntity_ {
  /// See [AppPreferenceEntity.id].
  static final id = obx.QueryIntegerProperty<AppPreferenceEntity>(
    _entities[0].properties[0],
  );

  /// See [AppPreferenceEntity.key].
  static final key = obx.QueryStringProperty<AppPreferenceEntity>(
    _entities[0].properties[1],
  );

  /// See [AppPreferenceEntity.stringValue].
  static final stringValue = obx.QueryStringProperty<AppPreferenceEntity>(
    _entities[0].properties[2],
  );

  /// See [AppPreferenceEntity.intValue].
  static final intValue = obx.QueryIntegerProperty<AppPreferenceEntity>(
    _entities[0].properties[3],
  );

  /// See [AppPreferenceEntity.doubleValue].
  static final doubleValue = obx.QueryDoubleProperty<AppPreferenceEntity>(
    _entities[0].properties[4],
  );

  /// See [AppPreferenceEntity.boolValue].
  static final boolValue = obx.QueryBooleanProperty<AppPreferenceEntity>(
    _entities[0].properties[5],
  );

  /// See [AppPreferenceEntity.type].
  static final type = obx.QueryStringProperty<AppPreferenceEntity>(
    _entities[0].properties[6],
  );
}

/// [CacheEntity] entity fields to define ObjectBox queries.
class CacheEntity_ {
  /// See [CacheEntity.id].
  static final id = obx.QueryIntegerProperty<CacheEntity>(
    _entities[1].properties[0],
  );

  /// See [CacheEntity.key].
  static final key = obx.QueryStringProperty<CacheEntity>(
    _entities[1].properties[1],
  );

  /// See [CacheEntity.jsonData].
  static final jsonData = obx.QueryStringProperty<CacheEntity>(
    _entities[1].properties[2],
  );

  /// See [CacheEntity.cacheTime].
  static final cacheTime = obx.QueryIntegerProperty<CacheEntity>(
    _entities[1].properties[3],
  );
}

/// [ItemEntity] entity fields to define ObjectBox queries.
class ItemEntity_ {
  /// See [ItemEntity.id].
  static final id = obx.QueryIntegerProperty<ItemEntity>(
    _entities[2].properties[0],
  );

  /// See [ItemEntity.itemId].
  static final itemId = obx.QueryStringProperty<ItemEntity>(
    _entities[2].properties[1],
  );

  /// See [ItemEntity.title].
  static final title = obx.QueryStringProperty<ItemEntity>(
    _entities[2].properties[2],
  );

  /// See [ItemEntity.categoryName].
  static final categoryName = obx.QueryStringProperty<ItemEntity>(
    _entities[2].properties[3],
  );

  /// See [ItemEntity.posterUrl].
  static final posterUrl = obx.QueryStringProperty<ItemEntity>(
    _entities[2].properties[4],
  );

  /// See [ItemEntity.releaseDate].
  static final releaseDate = obx.QueryStringProperty<ItemEntity>(
    _entities[2].properties[5],
  );

  /// See [ItemEntity.listType].
  static final listType = obx.QueryStringProperty<ItemEntity>(
    _entities[2].properties[6],
  );
}
